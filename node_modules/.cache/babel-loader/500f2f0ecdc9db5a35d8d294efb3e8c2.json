{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\depot\\\\eth_swap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\depot\\\\eth_swap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\depot\\\\eth_swap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\depot\\\\eth_swap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\depot\\\\eth_swap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\depot\\\\eth_swap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\depot\\\\eth_swap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\depot\\\\eth_swap\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react'; //import logo from '../logo.png';\n\nimport EthSwap from '../../src/abis/EthSwap.json';\nimport Token from '../../src/abis/Token.json';\nimport Navbar from './Navbar';\nimport Web3 from 'web3';\nimport './App.css'; //import NavbarHeader from 'react-bootstrap/lib/NavbarHeader';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockChainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadBlockChainData\",\n    value: function () {\n      var _loadBlockChainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var accounts, web3, ethBalance, abi, networkId, tokenData, token;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return window.web3;\n\n              case 2:\n                web3 = _context2.sent;\n                _context2.next = 5;\n                return web3.eth.getAccounts();\n\n              case 5:\n                accounts = _context2.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                _context2.next = 9;\n                return web3.eth.getBalance(this.state.account);\n\n              case 9:\n                ethBalance = _context2.sent;\n                //this.setState({ethBalance:ethBalance})\n                this.setState({\n                  ethBalance: ethBalance\n                });\n                abi = Token.abi;\n                _context2.next = 14;\n                return web3.eth.getId();\n\n              case 14:\n                networkId = _context2.sent;\n                _context2.next = 17;\n                return Token.network[networkId].address;\n\n              case 17:\n                tokenData = _context2.sent;\n                token = new web3.eth.Contract(abi, networkId);\n\n                if (tokenData) {} else {\n                  window.alert('token contract not deployed to the detected network !');\n                }\n\n                console.log(this.setState.account);\n                console.log(this.setState.ethBalance);\n                console.log(token);\n                return _context2.abrupt(\"return\", accounts);\n\n              case 24:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadBlockChainData() {\n        return _loadBlockChainData.apply(this, arguments);\n      }\n\n      return loadBlockChainData;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context3.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context3.next = 10;\n                break;\n\n              case 6:\n                window.alert('Non-Ethereum browser, detected install Metamask !'); // Fallback to localhost if no web3 injection. We've configured this to\n                // use the development console's port by default.\n\n                provider = new Web3.providers.HttpProvider('http://127.0.0.1:8545');\n                window.web3 = new Web3(provider);\n                window.alert('configured to  port by default: http://127.0.0.1:8545');\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: ''\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        account: this.state.account,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Daap university\")))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\depot\\eth_swap\\src\\components\\App.js"],"names":["React","Component","EthSwap","Token","Navbar","Web3","App","loadWeb3","loadBlockChainData","window","web3","eth","getAccounts","accounts","setState","account","getBalance","state","ethBalance","abi","getId","networkId","network","address","tokenData","token","Contract","alert","console","log","ethereum","enable","provider","providers","HttpProvider","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n//import logo from '../logo.png';\r\nimport EthSwap from '../../src/abis/EthSwap.json';\r\nimport Token   from '../../src/abis/Token.json';\r\nimport Navbar  from './Navbar';\r\nimport Web3 from 'web3';\r\nimport './App.css';\r\n//import NavbarHeader from 'react-bootstrap/lib/NavbarHeader';\r\n\r\nclass App extends Component {\r\n\r\n  \r\n  async componentWillMount(){\r\n\r\n    await this.loadWeb3();\r\n    await this.loadBlockChainData()\r\n  }\r\n  \r\n  async loadBlockChainData(){\r\n     \r\n    var accounts;\r\n    const web3 = await window.web3      \r\n    accounts = await web3.eth.getAccounts();        \r\n    this.setState({account: accounts[0]})\r\n\r\n    const ethBalance = await web3.eth.getBalance(this.state.account)\r\n    //this.setState({ethBalance:ethBalance})\r\n    this.setState({ethBalance})\r\n\r\n    const abi = Token.abi\r\n    const networkId = await web3.eth.getId()\r\n    const tokenData = await Token.network[networkId].address\r\n    \r\n    const token = new web3.eth.Contract(abi,networkId)\r\n\r\n    if(tokenData){\r\n\r\n      \r\n    }else{\r\n\r\n      window.alert('token contract not deployed to the detected network !')\r\n    }\r\n  \r\n   \r\n    console.log(this.setState.account);\r\n    console.log(this.setState.ethBalance);\r\n    \r\n    console.log(token)\r\n    return accounts;  \r\n  }\r\n\r\n  async loadWeb3(){\r\n\r\n    if(window.ethereum){       \r\n      \r\n        window.web3 = new Web3(window.ethereum)\r\n        \r\n        await window.ethereum.enable()        \r\n        //window.alert('web3 instance injected, using Local web3');\r\n\r\n    }else{\r\n      \r\n        window.alert('Non-Ethereum browser, detected install Metamask !');\r\n       // Fallback to localhost if no web3 injection. We've configured this to\r\n       // use the development console's port by default.\r\n     \r\n        var provider = new Web3.providers.HttpProvider('http://127.0.0.1:8545')\r\n        window.web3  = new Web3(provider)  \r\n        window.alert('configured to  port by default: http://127.0.0.1:8545');              \r\n    }\r\n     \r\n  }\r\n\r\n  constructor(props){\r\n\r\n    super(props)\r\n    this.state = {\r\n\r\n      account:''\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account = {this.state.account}/>        \r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\r\n              <div className=\"content mr-auto ml-auto\">\r\n              Daap university\r\n              </div>\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}